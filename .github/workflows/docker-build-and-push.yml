name: image build and push

on:
  push:
    # branches:
    #   - "main"
    paths:
      - Dockerfile
      - .github/workflows/docker-build-and-push.yml

env:
  IMAGE_NAME: "simaofsilva/drone-runner-docker"
  RUNNER_VERSION: "v1.8.3" # renovate: datasource=github-tags depName=drone-runners/drone-runner-docker
  TMATE_VERSION: "2.4.0" # renovate: datasource=github-tags depName=tmate-io/tmate

jobs:
  build-base-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - arm/v6
          - arm/v7
          - arm64
          - amd64
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Login to DockerHub
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set docker build args
        id: build_args
        run: |
          if [ $(echo "${{ matrix.platform }}" | grep -F "arm/") ]; then

            echo "arch=arm" >> $GITHUB_OUTPUT
            echo "arch_aux=32" >> $GITHUB_OUTPUT

            if [ "${{ matrix.platform }}" == "arm/v6" ]; then
              echo "variant=v6" >> $GITHUB_OUTPUT
            elif [ "${{ matrix.platform }}" == "arm/v7" ]; then
              echo "variant=v7" >> $GITHUB_OUTPUT
            fi

          elif [ "${{ matrix.platform }}" == "arm64" ]; then
            echo "arch=arm64" >> $GITHUB_OUTPUT
            echo "variant=v8" >> $GITHUB_OUTPUT

          else
            echo "arch=amd64" >> $GITHUB_OUTPUT
          fi

      - name: Normalise tags
        id: normalise_tags
        run: |
          if [ "${{ matrix.platform }}" == "arm/v6" ]; then
            echo "TAGS=arm32v6" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" == "arm/v7" ]; then
            echo "TAGS=arm32v7" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.platform }}" == "arm64" ]; then
            echo "TAGS=arm64" >> $GITHUB_OUTPUT
          else
            echo "TAGS=${{ matrix.platform }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          context: .
          platforms: linux/${{ matrix.platform }}
          push: true
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-${{ steps.normalise_tags.outputs.TAGS }}
          file: Dockerfile
          build-args: |
            RUNNER_VERSION=${{ env.RUNNER_VERSION }}
            TMATE_VERSION=${{ env.TMATE_VERSION }}
            ARCH=${{ env.ARCH }}

  build-arm32v6:
    runs-on: ubuntu-latest
    env:
      ARCH: arm
      VARIANT: v6
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3

      - name: Login to DockerHub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          platforms: linux/arm/${{ env.VARIANT }}
          push: true
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-${{ env.ARCH }}32${{ env.VARIANT }}
          file: Dockerfile
          build-args: |
            RUNNER_VERSION=${{ env.RUNNER_VERSION }}
            TMATE_VERSION=${{ env.TMATE_VERSION }}
            ARCH=${{ env.ARCH }}
            ARCH_AUX=32
            VARIANT=${{ env.VARIANT }}

  build-arm32v7:
    runs-on: ubuntu-latest
    env:
      ARCH: arm
      VARIANT: v7
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3

      - name: Login to DockerHub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          platforms: linux/arm/${{ env.VARIANT }}
          push: true
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-${{ env.ARCH }}32${{ env.VARIANT }}
          file: Dockerfile
          build-args: |
            RUNNER_VERSION=${{ env.RUNNER_VERSION }}
            TMATE_VERSION=${{ env.TMATE_VERSION }}
            ARCH=${{ env.ARCH }}
            ARCH_AUX=32
            VARIANT=${{ env.VARIANT }}

  build-arm64:
    runs-on: ubuntu-latest
    env:
      ARCH: arm64
      VARIANT: v8
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3

      - name: Login to DockerHub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          platforms: linux/${{ env.ARCH }}/${{ env.VARIANT }}
          push: true
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-${{ env.ARCH }}
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-${{ env.ARCH }}${{ env.VARIANT }}
          file: Dockerfile
          build-args: |
            RUNNER_VERSION=${{ env.RUNNER_VERSION }}
            TMATE_VERSION=${{ env.TMATE_VERSION }}
            ARCH=${{ env.ARCH }}
            VARIANT=${{ env.VARIANT }}

  build-manifest:
    needs:
      - build-base-images
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup crane
        uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # v0.3

      - name: create tag for arm64v8 platform
        run: |
          crane tag ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm64 ${{ env.RUNNER_VERSION }}-linux-arm64v8

      - name: create manifest for version ${{ env.RUNNER_VERSION }}
        run: |
          docker manifest create --amend ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }} \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm64v8 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm32v7 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm32v6

      # - name: push manifest for version ${{ env.RUNNER_VERSION }}
      #   run: |
      #     DOCKER_CLI_EXPERIMENTAL=enabled \
      #     docker manifest push ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}

      - name: create manifest for linux version
        run: |
          docker manifest create --amend ${{ env.IMAGE_NAME }}:linux \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm64v8 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm32v7 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm32v6

      # - name: push manifest for linux version
      #   run: |
      #     DOCKER_CLI_EXPERIMENTAL=enabled \
      #     docker manifest push ${{ env.IMAGE_NAME }}:linux

      - name: create manifest for latest version
        run: |
          docker manifest create --amend ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm64v8 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm32v7 \
            ${{ env.IMAGE_NAME }}:${{ env.RUNNER_VERSION }}-linux-arm32v6

      # - name: push manifest for latest version
      #   run: |
      #     DOCKER_CLI_EXPERIMENTAL=enabled \
      #     docker manifest push ${{ env.IMAGE_NAME }}:latest
